STMicroelectronics assembler v4.52   (C)1987-2024   Fri May 10 11:49:30 2024
Page 1  Assembler
                                               c:\users\simeo\qsync\university\computer architectures\lab5_exam\ex3_2nd.asm

   1                         stm8/     
   2                         
   0  000000                                 #include "mapping.inc"
   1                                                          ;-------------------------------
                                                                ;-----------------------
   2                                                          ; SEGMENT MAPPING FILE 
                                                                ;AUTOMATICALLY GENERATED BY 
                                                                ;STVD
   3                                                          ; SHOULD NOT BE MANUALLY 
                                                                ;MODIFIED.
   4                                                          ; CHANGES WILL BE LOST WHEN FILE
                                                                ; IS REGENERATED.
   5                                                          ;-------------------------------
                                                                ;-----------------------
   6  000000                                 #define  RAM0 1
   7  000000                                 #define  ram0_segment_start 0
   8  000000                                 #define  ram0_segment_end FF
   9  000000                                 #define  RAM1 1
  10  000000                                 #define  ram1_segment_start 100
  11  000000                                 #define  ram1_segment_end 5FF
  12  000000                                 #define  stack_segment_start 600
  13  000000                                 #define  stack_segment_end 7FF
<END_OF_INCLUSION>
   4                                   segment  'ram0'
   5  000000                       index     ds.w                   ; already cleared to 0 so no 
                                                                ;need for setup.
   6  000002                       sum       ds.b                   ; same here
   7  000003                       average_result  ds.b                   ; same here.
   8  000004                       remainder  ds.b     
   9                         
  10                                   segment  'rom'
  11  000000   F0020410            list      dc.b     $F0, $02, $04, $10
  12  000004   40580000            list_signed  dc.b     64, 88, 0, 0
  13  000008   0004                LIST_COUNT  DC.W     4
  14  00000A   04                  DIVISOR   DC.B     4
  15                         
  16                         main.l    
  17                                                          ; initialize SP
  18  00000B   AE07FF                        ldw      X,#stack_end
  19  00000E   94                            ldw      SP,X
  20                         
  21  00000F                                 #ifdef   1             
  22                                                          ; clear RAM0
  23  000000                       ram0_start.b  EQU      $0
  24  0000FF                       ram0_end.b  EQU      $FF
  25  00000F   AE0000                        ldw      X,#ram0_start
  26                         clear_ram0.l  
  27  000012   7F                            clr      (X)
  28  000013   5C                            incw     X
  29  000014   A300FF                        cpw      X,#ram0_end   
  30  000017 R 23F9                          jrule    clear_ram0
  31  000019                                 #endif   
  32                         
  33  000019                                 #ifdef   1
  34                                                          ; clear RAM1
  35  000100                       ram1_start.w  EQU      $100
  36  0005FF                       ram1_end.w  EQU      $5FF          
  37  000019   AE0100                        ldw      X,#ram1_start
STMicroelectronics assembler v4.52   (C)1987-2024   Fri May 10 11:49:30 2024
Page 2  Assembler
                                               c:\users\simeo\qsync\university\computer architectures\lab5_exam\ex3_2nd.asm

  38                         clear_ram1.l  
  39  00001C   7F                            clr      (X)
  40  00001D   5C                            incw     X
  41  00001E   A305FF                        cpw      X,#ram1_end   
  42  000021 R 23F9                          jrule    clear_ram1
  43  000023                                 #endif   
  44                         
  45                                                          ; clear stack
  46  000600                       stack_start.w  EQU      $600
  47  0007FF                       stack_end.w  EQU      $7FF
  48  000023   AE0600                        ldw      X,#stack_start
  49                         clear_stack.l  
  50  000026   7F                            clr      (X)
  51  000027   5C                            incw     X
  52  000028   A307FF                        cpw      X,#stack_end  
  53  00002B R 23F9                          jrule    clear_stack
  54                         
  55                         infinite_loop.l  
  56  00002D R CD0000                        call     calculate_average
  57  000030 R CD0000                        call     calculate_average_signed
  58                         calc_done  
  59  000033 R 20FE                          jra      calc_done
  60                         
  61                         calculate_sum  
  62                                                          ; fetching value
  63  000035 R CE0000                        ldw      X, index
  64  000038 R D60000                        ld       A, (list,X)
  65                                                          ; doing and storing addition
  66  00003B R CB0000                        ADD      A, sum
  67                                                          ; checking whether overflow is 
                                                                ;present w C bit
  68  00003E R 2407                          jrnc     no_carry
  69                                                          ; if carry(i.e. overflow 
                                                                ;present) move FF to average 
                                                                ;result.
  70  000040 R 35FF0000                      MOV      average_result, #$FF
  71  000044 R CC0000                        jp       sum_done
  72                         no_carry  
  73  000047 R C70000                        ld       sum, A
  74  00004A   5C                            incw     X
  75  00004B R CF0000                        ldw      index, X
  76  00004E R C30000                        cpw      X, LIST_COUNT
  77  000051 R 2703                          jreq     sum_done
  78  000053 R CC0000                        jp       calculate_sum
  79                         sum_done  
  80  000056   81                            ret      
  81                                   
  82                         calculate_average  
  83                                                          ; get sum
  84  000057 R CD0000                        call     calculate_sum
  85                                                          ; check whether carry was 
                                                                ;present.
  86  00005A R C60000                        ld       A, average_result
  87  00005D   A1FF                          cp       A, #$FF
  88  00005F R 270F                          jreq     carry_present
  89                                                          ; do division
  90  000061 R C60000                        ld       A, sum
STMicroelectronics assembler v4.52   (C)1987-2024   Fri May 10 11:49:30 2024
Page 3  Assembler
                                               c:\users\simeo\qsync\university\computer architectures\lab5_exam\ex3_2nd.asm

  91  000064   97                            ld       XL, A
  92  000065 R C60000                        ld       A, DIVISOR
  93  000068   62                            div      X, A
  94  000069 R C70000                        ld       remainder, A
  95  00006C   9F                            ld       A, XL
  96  00006D R C70000                        ld       average_result, A
  97                         carry_present  
  98  000070   81                            ret      
  99                                   
 100                         calculate_sum_signed             ;differnet list so other func 
                                                                ;required!
 101                                                          ; fetching value
 102  000071 R CE0000                        ldw      X, index
 103  000074 R D60000                        ld       A, (list_signed,X)
 104                                                          ; doing and storing addition
 105  000077 R CB0000                        ADD      A, sum
 106                                                          ; checking for overflow present
 107  00007A R 2807                          jrnv     no_overflow_signed
 108                                                          ; if overflow present move FF to
                                                                ; average result and be done
 109  00007C R 35FF0000                      MOV      average_result, #$FF
 110  000080 R CC0000                        jp       sum_done_signed
 111                         no_overflow_signed  
 112  000083 R C70000                        ld       sum, A
 113  000086   5C                            incw     X
 114  000087 R CF0000                        ldw      index, X
 115  00008A R C30000                        cpw      X, LIST_COUNT
 116  00008D R 2703                          jreq     sum_done_signed
 117  00008F R CC0000                        jp       calculate_sum_signed
 118                         sum_done_signed  
 119  000092   81                            ret      
 120                                   
 121                         
 122                         
 123                         calculate_average_signed  
 124  000093   AE0000                        ldw      X, #0
 125  000096 R CF0000                        ldw      index, X      ; reset index
 126  000099 R 35000000                      MOV      sum, #0       ; reset sum.
 127  00009D R CD0000                        call     calculate_sum_signed
 128                                                          ; check for overflow to skip 
                                                                ;division
 129  0000A0 R C60000                        ld       A, average_result
 130  0000A3   A1FF                          cp       A, #$FF
 131  0000A5 R 2708                          jreq     overflow_present_signed
 132                                                          ; do division
 133  0000A7 R C60000                        ld       A, sum
 134  0000AA   47                            sra      A
 135  0000AB   47                            sra      A
 136  0000AC R C70000                        ld       average_result, A
 137                         overflow_present_signed  
 138  0000AF   81                            ret      
 139                                   
 140  0000B0 R                               interrupt NonHandledInterrupt
 141                         NonHandledInterrupt.l  
 142  0000B0   80                            iret     
 143                         
 144                         
STMicroelectronics assembler v4.52   (C)1987-2024   Fri May 10 11:49:30 2024
Page 4  Assembler
                                               c:\users\simeo\qsync\university\computer architectures\lab5_exam\ex3_2nd.asm

 145                                   segment  'vectit'
 146  000000 R 00000000                      dc.l     {$82000000+main}  ; reset
 147  000004 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; trap
 148  000008 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq0
 149  00000C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq1
 150  000010 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq2
 151  000014 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq3
 152  000018 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq4
 153  00001C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq5
 154  000020 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq6
 155  000024 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq7
 156  000028 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq8
 157  00002C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq9
 158  000030 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq10
 159  000034 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq11
 160  000038 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq12
 161  00003C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq13
 162  000040 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq14
 163  000044 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq15
 164  000048 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq16
 165  00004C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq17
 166  000050 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq18
 167  000054 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq19
 168  000058 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq20
 169  00005C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq21
 170  000060 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq22
 171  000064 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq23
 172  000068 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq24
 173  00006C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq25
 174  000070 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq26
 175  000074 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq27
 176  000078 R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq28
 177  00007C R 00000000                      dc.l     {$82000000+NonHandledInterrupt}  ; irq29
 178                         
 179  000080                                 end      
STMicroelectronics assembler v4.52   (C)1987-2024   Fri May 10 11:49:30 2024
Page 5  Assembler
                                               c:\users\simeo\qsync\university\computer architectures\lab5_exam\ex3_2nd.asm

Symbol Name                       Value     Call       Type  Scope      Rel.  Line  Privacy  Segment   Size  Bytes File

DIVISOR                               000A         no  WORD  Internal   rel     14  private  textdata     1     1  -

LIST_COUNT                            0008         no  WORD  Internal   rel     13  private  textdata     2     2  -

NonHandledInterrupt               000000B0  interrupt  LONG  Internal   rel    141  private  textdata     1     0  -

average_result                        0003         no  WORD  Internal   rel      7  private  bss          1     1  -

clear_ram0                        00000012         no  LONG  Internal   rel     26  private  textdata    10     0  -
clear_ram1                        0000001C         no  LONG  Internal   rel     38  private  textdata    10     0  -
clear_stack                       00000026         no  LONG  Internal   rel     49  private  textdata     7     0  -
calc_done                             0033         no  WORD  Internal   rel     58  private  textdata     2     0  -
calculate_sum                         0035         no  WORD  Internal   rel     61  private  textdata    18     0  -
calculate_average                     0057         no  WORD  Internal   rel     82  private  textdata    25     0  -
carry_present                         0070         no  WORD  Internal   rel     97  private  textdata     1     0  -
calculate_sum_signed                  0071         no  WORD  Internal   rel    100  private  textdata    18     0  -
calculate_average_signed              0093         no  WORD  Internal   rel    123  private  textdata    28     0  -

index                                 0000         no  WORD  Internal   rel      5  private  bss          2     2  -
infinite_loop                     0000002D         no  LONG  Internal   rel     55  private  textdata     6     0  -

list                                  0000         no  WORD  Internal   rel     11  private  textdata     4     1  -
list_signed                           0004         no  WORD  Internal   rel     12  private  textdata     4     1  -

main                              0000000B         no  LONG  Internal   rel     16  private  textdata     7     0  -

no_carry                              0047         no  WORD  Internal   rel     72  private  textdata    15     0  -
no_overflow_signed                    0083         no  WORD  Internal   rel    111  private  textdata    15     0  -

overflow_present_signed               00AF         no  WORD  Internal   rel    137  private  textdata     1     0  -

remainder                             0004         no  WORD  Internal   rel      8  private  bss          1     1  -
ram0_start                              00         no  BYTE  Internal   ABS     23  private  textdata     0     0  -
ram0_end                                FF         no  BYTE  Internal   ABS     24  private  textdata     0     0  -
ram1_start                            0100         no  WORD  Internal   ABS     35  private  textdata     0     0  -
ram1_end                              05FF         no  WORD  Internal   ABS     36  private  textdata     0     0  -

sum                                   0002         no  WORD  Internal   rel      6  private  bss          1     1  -
stack_start                           0600         no  WORD  Internal   ABS     46  private  textdata     0     0  -
stack_end                             07FF         no  WORD  Internal   ABS     47  private  textdata     0     0  -
sum_done                              0056         no  WORD  Internal   rel     79  private  textdata     1     0  -
sum_done_signed                       0092         no  WORD  Internal   rel    118  private  textdata     1     0  -


31 labels
No errors on assembly of 'c:\users\simeo\qsync\university\computer architectures\lab5_exam\ex3_2nd.asm'